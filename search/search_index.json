{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"flake8-tergeo flake8-tergeo is a flake8 plugin which adds many new rules to improve your code quality. Out of the box it also brings a curated lists of other plugins without additional efforts needed. In difference to other projects, the list of included plugins is rather small and actively maintained. The included plugins and checks are opinionated, meaning that e.g. f-strings are preferred. Therefore, checks to find other formatting methods are included but none, to find f-strings. Also, code formatters like black and isort are recommended; therefore no code formatting rules are included.","title":"Home"},{"location":"#flake8-tergeo","text":"flake8-tergeo is a flake8 plugin which adds many new rules to improve your code quality. Out of the box it also brings a curated lists of other plugins without additional efforts needed. In difference to other projects, the list of included plugins is rather small and actively maintained. The included plugins and checks are opinionated, meaning that e.g. f-strings are preferred. Therefore, checks to find other formatting methods are included but none, to find f-strings. Also, code formatters like black and isort are recommended; therefore no code formatting rules are included.","title":"flake8-tergeo"},{"location":"checks/","text":"Checks Codes FTP000: internal errors FTP001 - FTP199: general purpose checks FTP200 - FTP219: flask and werkzeug checks FTP220 - FTP239: requests checks FTP300 - FTP399: docstring checks FTP000 Error while loading this plugin or any other internal error. FTP001 Checks if one of the debug modules pdb , ipdb , pudb , wdb , pdbpp and debugger is used. Debug modules should not be left in the code. FTP002 Checks if the debug builtin breakpoint is used. A breakpoint should not be left in code as its halts the program leading to a stop. FTP003 Checks for usage of datetime.datetime.utcnow without a tz parameter. The value returned by it is in current UTC time but without any timezone assigned. Instead call datetime.datetime.now with a timezone parameter ( tz ). FTP004 Checks that the module/file name follows the PEP-8 convention. FTP005 Finds duplicate class fields (multiple assigns to the same name in the class body). Most likely this is a bug or duplicated code line. Note, that nNo functions or blocks are checked. FTP006 Finds any usage of unicode directionality formatting characters. These characters are used to display left-to-right/right-to-left text in the same line and are interpreted by the bidi algorithm. However, having these characters in source code can lead to attacks like early returns because the code is executed in another way than written. A normal code review will not detect these issues. The easiest way is to ban these characters. For details see this paper . FTP007 Checks for usage of datetime.datetime.utcfromtimestamp without the tz parameter. The returned value is the current UTC time but without any timezone assigned. Instead call datetime.datetime.fromtimestamp with the timezone parameter ( tz ). FTP008 Checks for unnecessary parenthesis, like print((1,2,3)) or return (a, b) . By default, the parenthesis of a return of a single element tuple is not reported as with parenthesis the code is more clear. This can be disabled by using disallow-parens-in-return-single-element-tuple FTP009 Checks for classes extending BaseException . Extend Exception instead. FTP010 Checks if a disallowed developer comment identifier is used. Please refer to the developer comment configuration. FTP011 Checks if the tracking id reference in a developer comment is missing. Please refer to the developer comment configuration. FTP012 Checks if an invalid tracking id reference in a developer comment is used. Please refer to the developer comment configuration. FTP013 Checks if the description of a developer comment is missing. Please refer to the developer comment configuration. FTP014 Checks for calls of urllib.parse.urlparse . This function can parse a special ;parameters part inside the url path which is not recommended. The function urllib.parse.urlsplit does basically the same but ignores the parameters part and is therefore faster. FTP015 Checks for imports of pkg_resources . This module should not be used anymore as better and faster alternatives are available in importlib and its backports. FTP016 Finds usage of python2 metaclass declaration with __metaclass__ inside the class body. Use metaclass= in the class signature instead. FTP017 Finds legacy calls of typing.NamedTuple . Instead, extend typing.NamedTuple by creating a new class. FTP018 Finds legacy calls of typing.TypedDict . Instead, extend typing.TypedDict by creating a new class. FTP019 Checks if OSError is called with only one argument being an errno constant, e.g. OSError(errno.ENOENT) . The parameter is not set as errno attribute on the exception but used value for the error message instead. To properly use it, add a 2nd argument containing a message. FTP020 Checks if an encoding comment ( # -*- coding: utf-8 -*- ) is used. These comments are not needed in python 3 anymore. FTP021 Checks if a string value (or a part of it) can be replaced with string.ascii_letters . FTP022 Checks if a string value (or a part of it) can be replaced with string.ascii_lowercase . FTP023 Checks if a string value (or a part of it) can be replaced with string.ascii_uppercase . FTP024 Checks if a string value (or a part of it) can be replaced with string.digits . FTP025 Checks for isinstance calls with an one-element tuple. Replace with tuple with the exact value instead and save the time which is needed to construct and iterate over the tuple. FTP026 Checks for imports of the following easteregg modules - this - antigravity - __hello__ - __phello__ FTP027 Checks for if any of the following easteregg are imported over the __future__ module - braces - barry_as_FLUFL . FTP028 Finds empty doc comments ( #: ). FTP029 Finds enumeration loops where the index variable is named _ . Use a classical for loop instead. FTP030 Checks if any unnecessary future import is used. FTP031 Checks if percentage formatting is used in logging calls. FTP032 Checks if a f-string is used in logging calls. FTP033 Checks if str.format is used in logging calls. FTP034 Checks if exc_info=True is used in .exception() logging calls. This argument is redundant. FTP035 Checks if the deprecated logging method .warn() is used. FTP036 Checks if exc_info=True is used in error logging calls. Use .exception() instead. FTP037 Checks if keys used in the extra dict of logging calls clashes with existing logging.LogRecord fields. This can lead to errors during runtime. FTP038 Checks if float('NaN') is used. Use math.nan instead. FTP039 Checks if a dunder is used in the middle of the name like a__b . Double underscores at the start and at the end are ignored. FTP040 Checks if a file is in a folder without an __init__.py file. The error is reported on the first line of the file. If files are checked which should not be part of a namespace package (e.g. setup.py), a noqa comment or \"per-file-ignores\" can be used. FTP041 Checks if a module is used which is not specified as a requirement. Please refer to the requirement check configuration. FTP042 Checks if a class defines a magic method like __hex__ which is legacy from python2 and is no longer needed. FTP043 Checks if a function starting with get_ has no return or yield statement. Consider to rename the function as the name implies a return value. A function will be ignored, if it's a stub (e.g. just has a pass statement or only throws an exception) FTP044 Checks if an exception is raised from itself, e.g. raise exc from exc . FTP045 Checks if a interactive python function is called - help - exit FTP046 Checks if an except block only contains a reraise of the caught exception. Remove the try-except as it does not anything. FTP047 Checks if a too generic exception ( Exception and BaseException ) is raised. Consider to raise a more concrete exception instead. FTP048 Checks if a float is used as a dict key. Floats have precision errors, so using them as keys is unreliable and can lead to errors. FTP049 Checks if a single element unpacking is used (e.g. (a,) = my_list ). It can be simplified to a = mylist[0] FTP050 Checks if a print statement is used. FTP051 Checks if a pprint.pprint statement is used. FTP052 Checks if a pprint.pp statement is used. FTP053 Checks if a pprint.PrettyPrinter statement is used. FTP054 Checks if a union type annotation can utilize the new syntax of PEP 604. For example, a: Union[Foo, Bar] can be rewritten to a: Foo|bar . FTP055 Checks if an optional type annotations can utilize the new syntax of PEP 604. For example, a: Optional[Foo] can be rewritten to a: Foo|None . FTP056 Checks if a builtin alias in the typing module can be rewritten as the builtin itself as of PEP 585. E.g. typing.List[str] can be changed to list[str] . FTP057 Checks if relative imports are used. FTP058 Checks if an unnecessary import alias is used, e.g. import foo as foo . FTP059 Checks if an argument in a function call has a pointless starred expression. For single starred expressions, lists, dicts, tuples, sets, strings and bytes are checked. As an example, foo(*[1, 2, 3]) can be simplified to foo(1, 2, 3) . For double starred expressions, only dicts are checked. An issue is only raised if all keys of the dict are strings, else the dict is not considered static and will be ignore. As an example, foo(**{'a': 1, 'b': 2}) can be simplified to foo(a=1, b=2) . FTP060 Checks if a percentage formatting is used FTP061 Checks if \"\".format() is used FTP062 Checks if str.format is used FTP063 Check if contextlib.wraps is used. The call will work at runtime, but wraps comes originally from functools.wraps and contextlib doesn't re-export it, so it should be considered as an implementation detail which is not stable. Therefore functools.wraps should be used. FTP064 Check if __debug__ is used. This constant is false when python is not started in optimized -O mode. Because this mode is basically never used and having code which only runs when not running in a special mode can have unexpected side effects, this constant should not be used. FTP065 Check if collections.namedtuple is used. typing.NamedTuple should be used instead, since it integrates nicer with IDE's and type checkers FTP066 Check if an enum.Enum subclass is used which also extends int , so e.g. class MyEnum(Enum, int) . For that the alias enum.IntEnum can be used FTP067 Check if an enum.Enum subclass is used which also extends str , so e.g. class MyEnum(Enum, str) . For that the alias enum.StrEnum can be used. The check is only active for python3.11+ FTP068 Check if a call of subprocess.run has the value subprocess.PIPE assigned to both stdout and stderr . In this case, it can be simplified to capture_output=True . FTP069 Check if a variable has a name which can lead to confusion like pi = 5 or nan = 4 . FTP070 Checks for super calls with arguments FTP071 Check for assign and return statements. Normally the check also finds statements like a: int = 2; return a . To configure the step to ignore assignments with annotations, use ignore-annotation-in-assign-return . By default the check is disabled if the variable name happens to be part of a global/nonlocal statement. The check is also suppressed, if the assign-return is part of a try block and in the corresponding finally block the variable is used FTP072 Checks for unicode string prefixes like u\"abc\" FTP073 Checks for the usage of functools.lru_cache which can be replaced with functools.cache . The check is only active if functools.lru_cache is somehow imported. FTP074 Checks if a functools.cache or functools.lru_cache is used on a class method. Since the self argument is cached as well, garbage collection is blocked, leading to memory leaks. If the method is decorated with staticmethod or classmethod , the issue doesn't happen. Note, that the check only considers methods which are defined as a direct child of a class. FTP075 Check if subprocess.run or subprocess.Popen is called with universal_newlines . This keyword argument can be replaced with text which is more readable FTP076 Checks for import of from re import DEBUG or usage of re.DEBUG FTP078 Checks for type comments which should be replaced by annotations. type:ignore is ignored FTP077 Check if in a union, None always comes last. For instance a: int|float|None is okay, but a: int|None|float is not. It is active for type annotations, type aliases and isinstance calls. This check does not consider typing.Optional FTP079 Checks for unnecessary lambda statement which can be replaced with their built-in function alternative, e.g. lambda: [] with list FTP080 Checks for implicit concatenated strings on the same line FTP081 Checks for missing onerror keyword in os.walk . The check is only active if os.walk is somehow imported. FTP082 Checks for unnecessary usage of metaclass=abc.ABCMeta , which can be simplified to abc.ABC FTP083 Checks for unnecessary usage of str() , like str(\"a\") FTP084 Checks for unnecessary usage of int() , like int(1) FTP085 Checks for unnecessary usage of float() , like float(1.1) FTP086 Checks for unnecessary usage of bool() , like bool(True) FTP087 Checks for imports of xml.etree.cElementTree FTP088 Checks for the usage of io.open which can be simplified to open . FTP089 Checks for the usage of OSError aliases EnvironmentError , IOError and WindowsError . In addition, it also finds usage and imports of socket.error and select.error . In this case, calls like raise socket.error() are not checked. FTP090 Checks for unsorted __all__ attributes on any level. The check is only done if the type is a list, tuple or set during parsing (e.g. list is a function and not a list during parsing). Only items which are strings are used in the sort check, all others are ignored. FTP091 Checks if backslashes are used to split long lines. FTP092 Checks for unnecessary usage of 0 as starting point with no step size defined in range call. FTP093 Find functions starting with is_/have_/has_/can_ which have a non-boolean return type. typing.TypeGuard is accepted as an alternative to a boolean. Functions with no return type annotation are ignored. FTP094 Find cases where the __slot__ attribute is assigned something else than a tuple or dict, like __slots__ = [] or __slots__ = get_slots() . In general, using e.g. a list or single string is fine, but always using a tuple or dict is more consistent and recommended FTP095 Checks for unnecessary use of unpack operators. FTP096 Find functions which are decorated with property , classmethod or staticmethod but are outside of a class. FTP097 Find enums without enum.unique decorator to make sure no duplicate values are assigned. FTP098 Checks for usage of multiprocessing.set_start_method . A multiprocessing Context should be used instead. FTP099 Since python 3.11 the datetime.timezone.utc constant is also accessible with datetime.UTC which is found by this check FTP100 Find print(\"\") which can be simplified to print() FTP101 Find unpack operators inside of a dict which can be rewritten with the dict union operator. E.g. {**a, **b} can be rewritten to a|b and {**a, 'b': 2} to a|{'b': 2} . The check ignores unpacks in the middle of the dict, e.g. {'a': 1, **b, 'c': 3} . FTP102 Find Path(\".\") of pathlib.Path which can be simplified to Path() FTP103 Find usage of the OS dependent pathlib classes pathlib.PosixPath , pathlib.WindowsPath , pathlib.PurePosixPath and pathlib.PureWindowsPath . These classes can be replaced with pathlib.Path and pathlib.PurePath , because they are OS independent and create the correct OS dependent class behind the scenes FTP104 Finds typing.Never and typing.NoReturn in unions in type annotations and type alias. These types are redundant in unions and can be removed. FTP105 Find nested typing.Union types like Union[Union[int, str], float] . These can be simplified to Union[int, str, float] FTP106 Find typing.Union with a single element, e.g. Union[int] . This can be simplified to int FTP107 Find usage of typing.Never in return annotations. Instead use typing.NoReturn FTP108 Find usage of typing.NoReturn in non-return annotations (arguments and assignments). Instead use typing.Never FTP109 Checks for unnecessary usage of bytes() , like bytes(b'abc'') FTP110 Find str() which can be simplified to \"\" FTP111 Find int() which can be simplified to 0 FTP112 Find float() which can be simplified to 0.0 FTP113 Find bool() which can be simplified to False FTP114 Find bytes() which can be simplified to b\"\" FTP115 Find invisible unicode characters in source code FTP116 Find named expressions (walrus operator := ) in assert statements FTP117 Find functions calling warnings.warn but which are also decorated with warnings.deprecated or typing_extensions.deprecated FTP118 Find functions calling warnings.warn but which could use warnings.deprecated or typing_extensions.deprecated FTP119 Checks for unsorted __slots__ attributes on any level. The check is only done if the type is a list, tuple or set during parsing. Only items which are strings are used in the sort check; all others are ignored. FTP120 Find assignments to __slots__ outside of a class. The assignment can be wrapped into constructs like an if but the first container needs to be a class and not a function or module FTP121 Find calls of soft-deprecated os functions which should be replaced with subprocess calls like os.popen or os.spawnv FTP122 Find methods decorated with both classmethod and property . Through the different python versions the behavior is unstable and should be avoided FTP123 Finds usage of typing.Generator where the last argument in the subscript is None , because with PEP696 these can be omitted. The check is only active if running python 3.13+ a from __future__ import annotations import is present in the module the current code is inside a typing.TYPE_CHECKING block Also, the check will only consider type annotations (to prevent invalid syntax) if at least one of the following conditions is true: python 3.12 or below is used the code is not inside a typing.TYPE_CHECKING block FTP124 Find assignments to __all__ on non-module level, e.g. in classes or functions FTP125 Checks if the typing.override decorator is the first decorator applied to a function. If descriptor based decorators like @property are present, too, typing.override should be the seconds decorator applied. See here for details why the order matters FTP126 Checks if typing.TypeAlias is used. With PEP 695 the type statement should be used instead. The check is only active for python 3.12 and onwards FTP127 Checks if typing.TypeVar is used. With PEP 695 , TypeVar s are no longer needed. The check is only active for python 3.12 and onwards FTP128 Checks if typing.Generic is used. With PEP 695 , Generic is no longer needed. The check is only active for python 3.12 and onwards FTP129 Checks if the cause of a raised error is the same as the caught error, e.g. except ValueError: raise MyError(\"some message\") from ValueError This is most likely a bug and should be replaced with except ValueError as err: raise MyError(\"some message\") from err FTP130 Checks if string.Template is used with python 3.14 onwards. Use t-strings (PEP 750) instead. FTP131 Checks if re.compile is called with a string constant within a * function * for loop * while loop * lambda As the regex is recompiled each time the construct is called but won't change, it can be moved to a constant on module level. FTP132 Checks if a module functions of re like re.fullmatch is called with a constant string within a * function * for loop * while loop * lambda As the regex is recompiled each time the construct is called but won't change, the pattern can be compiled and stored in a constant and be used instead. FTP133 Checks bz2 , gzip , lzma or zlib are imported without using the compression namespace. With python3.14 these packages should be imported like import compression.bz2 instead of import bz2 . The check is only active for python 3.14 and onwards. FTP134 Checks if isinstance is called with a tuple which can be replaced with a union type. For example isinstance(foo, (str, int)) can be rewritten to isinstance(foo, str|int) . FTP135 Checks if issubclass is called with a tuple which can be replaced with a union type. For example issubclass(Foo, (A, B)) can be rewritten to issubclass(Foo, A|B) . FTP136 Checks if type(None) is used within isinstance when called with a union type. For example isinstance(foo, (str, type(None))) can be rewritten to isinstance(foo, str|None) . FTP200 Find calls of flask.abort and werkzeug.exceptions.abort . Instead of calling this helper function raise the appropriate exception directly FTP220 Find usage of requests.codes which should be replaced with http.HTTPStatus Docstyle Rules to make docstrings PEP 257 compliant inspired by pydocstyle . These rules are meant for projects which cannot or don't want to use ruff,, e.g. because flake8 is still used in parallel. FTP300 Checks if a public package has a docstring in it's __init__ file. FTP301 Checks if a public class has a docstring. FTP302 Checks if a public method has a docstring. FTP303 Checks if a public function has a docstring. FTP304 Checks if a magic method (e.g. __eq__ ) has a docstring. __init__ methods are ignored FTP305 Checks if a __init__ method has a docstring. FTP306 Checks if an overridden method (decorated with typing.override ) has a docstring. FTP307 Checks if a public module has a docstring. FTP308 Checks if a docstring is completely empty. FTP309 Checks if the first line of a docstring is empty. The first line is considered the summary. FTP310 Checks that in a multiline docstring the first line is followed by an empty line. FTP311 Checks if the first line ends with a period. FTP312 Checks that a function/method decorated with typing.overload has no docstring. FTP313 Checks if a magic function (e.g. module level __getattr__ ) has a docstring. FTP314 Checks that no empty line is present between a function/method docstring and the function body FTP315 Checks that the closing \"\"\" is on a separate line in a multiline docstring FTP316 Checks that a docstring starts with an uppercase letter or number unless the word is part of ftp-docstyle-lowercase-words FTP317 Checks if triple quotes ( \"\"\" or ''' ) are used for docstrings","title":"Checks"},{"location":"checks/#checks","text":"","title":"Checks"},{"location":"checks/#codes","text":"FTP000: internal errors FTP001 - FTP199: general purpose checks FTP200 - FTP219: flask and werkzeug checks FTP220 - FTP239: requests checks FTP300 - FTP399: docstring checks","title":"Codes"},{"location":"checks/#ftp000","text":"Error while loading this plugin or any other internal error.","title":"FTP000"},{"location":"checks/#ftp001","text":"Checks if one of the debug modules pdb , ipdb , pudb , wdb , pdbpp and debugger is used. Debug modules should not be left in the code.","title":"FTP001"},{"location":"checks/#ftp002","text":"Checks if the debug builtin breakpoint is used. A breakpoint should not be left in code as its halts the program leading to a stop.","title":"FTP002"},{"location":"checks/#ftp003","text":"Checks for usage of datetime.datetime.utcnow without a tz parameter. The value returned by it is in current UTC time but without any timezone assigned. Instead call datetime.datetime.now with a timezone parameter ( tz ).","title":"FTP003"},{"location":"checks/#ftp004","text":"Checks that the module/file name follows the PEP-8 convention.","title":"FTP004"},{"location":"checks/#ftp005","text":"Finds duplicate class fields (multiple assigns to the same name in the class body). Most likely this is a bug or duplicated code line. Note, that nNo functions or blocks are checked.","title":"FTP005"},{"location":"checks/#ftp006","text":"Finds any usage of unicode directionality formatting characters. These characters are used to display left-to-right/right-to-left text in the same line and are interpreted by the bidi algorithm. However, having these characters in source code can lead to attacks like early returns because the code is executed in another way than written. A normal code review will not detect these issues. The easiest way is to ban these characters. For details see this paper .","title":"FTP006"},{"location":"checks/#ftp007","text":"Checks for usage of datetime.datetime.utcfromtimestamp without the tz parameter. The returned value is the current UTC time but without any timezone assigned. Instead call datetime.datetime.fromtimestamp with the timezone parameter ( tz ).","title":"FTP007"},{"location":"checks/#ftp008","text":"Checks for unnecessary parenthesis, like print((1,2,3)) or return (a, b) . By default, the parenthesis of a return of a single element tuple is not reported as with parenthesis the code is more clear. This can be disabled by using disallow-parens-in-return-single-element-tuple","title":"FTP008"},{"location":"checks/#ftp009","text":"Checks for classes extending BaseException . Extend Exception instead.","title":"FTP009"},{"location":"checks/#ftp010","text":"Checks if a disallowed developer comment identifier is used. Please refer to the developer comment configuration.","title":"FTP010"},{"location":"checks/#ftp011","text":"Checks if the tracking id reference in a developer comment is missing. Please refer to the developer comment configuration.","title":"FTP011"},{"location":"checks/#ftp012","text":"Checks if an invalid tracking id reference in a developer comment is used. Please refer to the developer comment configuration.","title":"FTP012"},{"location":"checks/#ftp013","text":"Checks if the description of a developer comment is missing. Please refer to the developer comment configuration.","title":"FTP013"},{"location":"checks/#ftp014","text":"Checks for calls of urllib.parse.urlparse . This function can parse a special ;parameters part inside the url path which is not recommended. The function urllib.parse.urlsplit does basically the same but ignores the parameters part and is therefore faster.","title":"FTP014"},{"location":"checks/#ftp015","text":"Checks for imports of pkg_resources . This module should not be used anymore as better and faster alternatives are available in importlib and its backports.","title":"FTP015"},{"location":"checks/#ftp016","text":"Finds usage of python2 metaclass declaration with __metaclass__ inside the class body. Use metaclass= in the class signature instead.","title":"FTP016"},{"location":"checks/#ftp017","text":"Finds legacy calls of typing.NamedTuple . Instead, extend typing.NamedTuple by creating a new class.","title":"FTP017"},{"location":"checks/#ftp018","text":"Finds legacy calls of typing.TypedDict . Instead, extend typing.TypedDict by creating a new class.","title":"FTP018"},{"location":"checks/#ftp019","text":"Checks if OSError is called with only one argument being an errno constant, e.g. OSError(errno.ENOENT) . The parameter is not set as errno attribute on the exception but used value for the error message instead. To properly use it, add a 2nd argument containing a message.","title":"FTP019"},{"location":"checks/#ftp020","text":"Checks if an encoding comment ( # -*- coding: utf-8 -*- ) is used. These comments are not needed in python 3 anymore.","title":"FTP020"},{"location":"checks/#ftp021","text":"Checks if a string value (or a part of it) can be replaced with string.ascii_letters .","title":"FTP021"},{"location":"checks/#ftp022","text":"Checks if a string value (or a part of it) can be replaced with string.ascii_lowercase .","title":"FTP022"},{"location":"checks/#ftp023","text":"Checks if a string value (or a part of it) can be replaced with string.ascii_uppercase .","title":"FTP023"},{"location":"checks/#ftp024","text":"Checks if a string value (or a part of it) can be replaced with string.digits .","title":"FTP024"},{"location":"checks/#ftp025","text":"Checks for isinstance calls with an one-element tuple. Replace with tuple with the exact value instead and save the time which is needed to construct and iterate over the tuple.","title":"FTP025"},{"location":"checks/#ftp026","text":"Checks for imports of the following easteregg modules - this - antigravity - __hello__ - __phello__","title":"FTP026"},{"location":"checks/#ftp027","text":"Checks for if any of the following easteregg are imported over the __future__ module - braces - barry_as_FLUFL .","title":"FTP027"},{"location":"checks/#ftp028","text":"Finds empty doc comments ( #: ).","title":"FTP028"},{"location":"checks/#ftp029","text":"Finds enumeration loops where the index variable is named _ . Use a classical for loop instead.","title":"FTP029"},{"location":"checks/#ftp030","text":"Checks if any unnecessary future import is used.","title":"FTP030"},{"location":"checks/#ftp031","text":"Checks if percentage formatting is used in logging calls.","title":"FTP031"},{"location":"checks/#ftp032","text":"Checks if a f-string is used in logging calls.","title":"FTP032"},{"location":"checks/#ftp033","text":"Checks if str.format is used in logging calls.","title":"FTP033"},{"location":"checks/#ftp034","text":"Checks if exc_info=True is used in .exception() logging calls. This argument is redundant.","title":"FTP034"},{"location":"checks/#ftp035","text":"Checks if the deprecated logging method .warn() is used.","title":"FTP035"},{"location":"checks/#ftp036","text":"Checks if exc_info=True is used in error logging calls. Use .exception() instead.","title":"FTP036"},{"location":"checks/#ftp037","text":"Checks if keys used in the extra dict of logging calls clashes with existing logging.LogRecord fields. This can lead to errors during runtime.","title":"FTP037"},{"location":"checks/#ftp038","text":"Checks if float('NaN') is used. Use math.nan instead.","title":"FTP038"},{"location":"checks/#ftp039","text":"Checks if a dunder is used in the middle of the name like a__b . Double underscores at the start and at the end are ignored.","title":"FTP039"},{"location":"checks/#ftp040","text":"Checks if a file is in a folder without an __init__.py file. The error is reported on the first line of the file. If files are checked which should not be part of a namespace package (e.g. setup.py), a noqa comment or \"per-file-ignores\" can be used.","title":"FTP040"},{"location":"checks/#ftp041","text":"Checks if a module is used which is not specified as a requirement. Please refer to the requirement check configuration.","title":"FTP041"},{"location":"checks/#ftp042","text":"Checks if a class defines a magic method like __hex__ which is legacy from python2 and is no longer needed.","title":"FTP042"},{"location":"checks/#ftp043","text":"Checks if a function starting with get_ has no return or yield statement. Consider to rename the function as the name implies a return value. A function will be ignored, if it's a stub (e.g. just has a pass statement or only throws an exception)","title":"FTP043"},{"location":"checks/#ftp044","text":"Checks if an exception is raised from itself, e.g. raise exc from exc .","title":"FTP044"},{"location":"checks/#ftp045","text":"Checks if a interactive python function is called - help - exit","title":"FTP045"},{"location":"checks/#ftp046","text":"Checks if an except block only contains a reraise of the caught exception. Remove the try-except as it does not anything.","title":"FTP046"},{"location":"checks/#ftp047","text":"Checks if a too generic exception ( Exception and BaseException ) is raised. Consider to raise a more concrete exception instead.","title":"FTP047"},{"location":"checks/#ftp048","text":"Checks if a float is used as a dict key. Floats have precision errors, so using them as keys is unreliable and can lead to errors.","title":"FTP048"},{"location":"checks/#ftp049","text":"Checks if a single element unpacking is used (e.g. (a,) = my_list ). It can be simplified to a = mylist[0]","title":"FTP049"},{"location":"checks/#ftp050","text":"Checks if a print statement is used.","title":"FTP050"},{"location":"checks/#ftp051","text":"Checks if a pprint.pprint statement is used.","title":"FTP051"},{"location":"checks/#ftp052","text":"Checks if a pprint.pp statement is used.","title":"FTP052"},{"location":"checks/#ftp053","text":"Checks if a pprint.PrettyPrinter statement is used.","title":"FTP053"},{"location":"checks/#ftp054","text":"Checks if a union type annotation can utilize the new syntax of PEP 604. For example, a: Union[Foo, Bar] can be rewritten to a: Foo|bar .","title":"FTP054"},{"location":"checks/#ftp055","text":"Checks if an optional type annotations can utilize the new syntax of PEP 604. For example, a: Optional[Foo] can be rewritten to a: Foo|None .","title":"FTP055"},{"location":"checks/#ftp056","text":"Checks if a builtin alias in the typing module can be rewritten as the builtin itself as of PEP 585. E.g. typing.List[str] can be changed to list[str] .","title":"FTP056"},{"location":"checks/#ftp057","text":"Checks if relative imports are used.","title":"FTP057"},{"location":"checks/#ftp058","text":"Checks if an unnecessary import alias is used, e.g. import foo as foo .","title":"FTP058"},{"location":"checks/#ftp059","text":"Checks if an argument in a function call has a pointless starred expression. For single starred expressions, lists, dicts, tuples, sets, strings and bytes are checked. As an example, foo(*[1, 2, 3]) can be simplified to foo(1, 2, 3) . For double starred expressions, only dicts are checked. An issue is only raised if all keys of the dict are strings, else the dict is not considered static and will be ignore. As an example, foo(**{'a': 1, 'b': 2}) can be simplified to foo(a=1, b=2) .","title":"FTP059"},{"location":"checks/#ftp060","text":"Checks if a percentage formatting is used","title":"FTP060"},{"location":"checks/#ftp061","text":"Checks if \"\".format() is used","title":"FTP061"},{"location":"checks/#ftp062","text":"Checks if str.format is used","title":"FTP062"},{"location":"checks/#ftp063","text":"Check if contextlib.wraps is used. The call will work at runtime, but wraps comes originally from functools.wraps and contextlib doesn't re-export it, so it should be considered as an implementation detail which is not stable. Therefore functools.wraps should be used.","title":"FTP063"},{"location":"checks/#ftp064","text":"Check if __debug__ is used. This constant is false when python is not started in optimized -O mode. Because this mode is basically never used and having code which only runs when not running in a special mode can have unexpected side effects, this constant should not be used.","title":"FTP064"},{"location":"checks/#ftp065","text":"Check if collections.namedtuple is used. typing.NamedTuple should be used instead, since it integrates nicer with IDE's and type checkers","title":"FTP065"},{"location":"checks/#ftp066","text":"Check if an enum.Enum subclass is used which also extends int , so e.g. class MyEnum(Enum, int) . For that the alias enum.IntEnum can be used","title":"FTP066"},{"location":"checks/#ftp067","text":"Check if an enum.Enum subclass is used which also extends str , so e.g. class MyEnum(Enum, str) . For that the alias enum.StrEnum can be used. The check is only active for python3.11+","title":"FTP067"},{"location":"checks/#ftp068","text":"Check if a call of subprocess.run has the value subprocess.PIPE assigned to both stdout and stderr . In this case, it can be simplified to capture_output=True .","title":"FTP068"},{"location":"checks/#ftp069","text":"Check if a variable has a name which can lead to confusion like pi = 5 or nan = 4 .","title":"FTP069"},{"location":"checks/#ftp070","text":"Checks for super calls with arguments","title":"FTP070"},{"location":"checks/#ftp071","text":"Check for assign and return statements. Normally the check also finds statements like a: int = 2; return a . To configure the step to ignore assignments with annotations, use ignore-annotation-in-assign-return . By default the check is disabled if the variable name happens to be part of a global/nonlocal statement. The check is also suppressed, if the assign-return is part of a try block and in the corresponding finally block the variable is used","title":"FTP071"},{"location":"checks/#ftp072","text":"Checks for unicode string prefixes like u\"abc\"","title":"FTP072"},{"location":"checks/#ftp073","text":"Checks for the usage of functools.lru_cache which can be replaced with functools.cache . The check is only active if functools.lru_cache is somehow imported.","title":"FTP073"},{"location":"checks/#ftp074","text":"Checks if a functools.cache or functools.lru_cache is used on a class method. Since the self argument is cached as well, garbage collection is blocked, leading to memory leaks. If the method is decorated with staticmethod or classmethod , the issue doesn't happen. Note, that the check only considers methods which are defined as a direct child of a class.","title":"FTP074"},{"location":"checks/#ftp075","text":"Check if subprocess.run or subprocess.Popen is called with universal_newlines . This keyword argument can be replaced with text which is more readable","title":"FTP075"},{"location":"checks/#ftp076","text":"Checks for import of from re import DEBUG or usage of re.DEBUG","title":"FTP076"},{"location":"checks/#ftp078","text":"Checks for type comments which should be replaced by annotations. type:ignore is ignored","title":"FTP078"},{"location":"checks/#ftp077","text":"Check if in a union, None always comes last. For instance a: int|float|None is okay, but a: int|None|float is not. It is active for type annotations, type aliases and isinstance calls. This check does not consider typing.Optional","title":"FTP077"},{"location":"checks/#ftp079","text":"Checks for unnecessary lambda statement which can be replaced with their built-in function alternative, e.g. lambda: [] with list","title":"FTP079"},{"location":"checks/#ftp080","text":"Checks for implicit concatenated strings on the same line","title":"FTP080"},{"location":"checks/#ftp081","text":"Checks for missing onerror keyword in os.walk . The check is only active if os.walk is somehow imported.","title":"FTP081"},{"location":"checks/#ftp082","text":"Checks for unnecessary usage of metaclass=abc.ABCMeta , which can be simplified to abc.ABC","title":"FTP082"},{"location":"checks/#ftp083","text":"Checks for unnecessary usage of str() , like str(\"a\")","title":"FTP083"},{"location":"checks/#ftp084","text":"Checks for unnecessary usage of int() , like int(1)","title":"FTP084"},{"location":"checks/#ftp085","text":"Checks for unnecessary usage of float() , like float(1.1)","title":"FTP085"},{"location":"checks/#ftp086","text":"Checks for unnecessary usage of bool() , like bool(True)","title":"FTP086"},{"location":"checks/#ftp087","text":"Checks for imports of xml.etree.cElementTree","title":"FTP087"},{"location":"checks/#ftp088","text":"Checks for the usage of io.open which can be simplified to open .","title":"FTP088"},{"location":"checks/#ftp089","text":"Checks for the usage of OSError aliases EnvironmentError , IOError and WindowsError . In addition, it also finds usage and imports of socket.error and select.error . In this case, calls like raise socket.error() are not checked.","title":"FTP089"},{"location":"checks/#ftp090","text":"Checks for unsorted __all__ attributes on any level. The check is only done if the type is a list, tuple or set during parsing (e.g. list is a function and not a list during parsing). Only items which are strings are used in the sort check, all others are ignored.","title":"FTP090"},{"location":"checks/#ftp091","text":"Checks if backslashes are used to split long lines.","title":"FTP091"},{"location":"checks/#ftp092","text":"Checks for unnecessary usage of 0 as starting point with no step size defined in range call.","title":"FTP092"},{"location":"checks/#ftp093","text":"Find functions starting with is_/have_/has_/can_ which have a non-boolean return type. typing.TypeGuard is accepted as an alternative to a boolean. Functions with no return type annotation are ignored.","title":"FTP093"},{"location":"checks/#ftp094","text":"Find cases where the __slot__ attribute is assigned something else than a tuple or dict, like __slots__ = [] or __slots__ = get_slots() . In general, using e.g. a list or single string is fine, but always using a tuple or dict is more consistent and recommended","title":"FTP094"},{"location":"checks/#ftp095","text":"Checks for unnecessary use of unpack operators.","title":"FTP095"},{"location":"checks/#ftp096","text":"Find functions which are decorated with property , classmethod or staticmethod but are outside of a class.","title":"FTP096"},{"location":"checks/#ftp097","text":"Find enums without enum.unique decorator to make sure no duplicate values are assigned.","title":"FTP097"},{"location":"checks/#ftp098","text":"Checks for usage of multiprocessing.set_start_method . A multiprocessing Context should be used instead.","title":"FTP098"},{"location":"checks/#ftp099","text":"Since python 3.11 the datetime.timezone.utc constant is also accessible with datetime.UTC which is found by this check","title":"FTP099"},{"location":"checks/#ftp100","text":"Find print(\"\") which can be simplified to print()","title":"FTP100"},{"location":"checks/#ftp101","text":"Find unpack operators inside of a dict which can be rewritten with the dict union operator. E.g. {**a, **b} can be rewritten to a|b and {**a, 'b': 2} to a|{'b': 2} . The check ignores unpacks in the middle of the dict, e.g. {'a': 1, **b, 'c': 3} .","title":"FTP101"},{"location":"checks/#ftp102","text":"Find Path(\".\") of pathlib.Path which can be simplified to Path()","title":"FTP102"},{"location":"checks/#ftp103","text":"Find usage of the OS dependent pathlib classes pathlib.PosixPath , pathlib.WindowsPath , pathlib.PurePosixPath and pathlib.PureWindowsPath . These classes can be replaced with pathlib.Path and pathlib.PurePath , because they are OS independent and create the correct OS dependent class behind the scenes","title":"FTP103"},{"location":"checks/#ftp104","text":"Finds typing.Never and typing.NoReturn in unions in type annotations and type alias. These types are redundant in unions and can be removed.","title":"FTP104"},{"location":"checks/#ftp105","text":"Find nested typing.Union types like Union[Union[int, str], float] . These can be simplified to Union[int, str, float]","title":"FTP105"},{"location":"checks/#ftp106","text":"Find typing.Union with a single element, e.g. Union[int] . This can be simplified to int","title":"FTP106"},{"location":"checks/#ftp107","text":"Find usage of typing.Never in return annotations. Instead use typing.NoReturn","title":"FTP107"},{"location":"checks/#ftp108","text":"Find usage of typing.NoReturn in non-return annotations (arguments and assignments). Instead use typing.Never","title":"FTP108"},{"location":"checks/#ftp109","text":"Checks for unnecessary usage of bytes() , like bytes(b'abc'')","title":"FTP109"},{"location":"checks/#ftp110","text":"Find str() which can be simplified to \"\"","title":"FTP110"},{"location":"checks/#ftp111","text":"Find int() which can be simplified to 0","title":"FTP111"},{"location":"checks/#ftp112","text":"Find float() which can be simplified to 0.0","title":"FTP112"},{"location":"checks/#ftp113","text":"Find bool() which can be simplified to False","title":"FTP113"},{"location":"checks/#ftp114","text":"Find bytes() which can be simplified to b\"\"","title":"FTP114"},{"location":"checks/#ftp115","text":"Find invisible unicode characters in source code","title":"FTP115"},{"location":"checks/#ftp116","text":"Find named expressions (walrus operator := ) in assert statements","title":"FTP116"},{"location":"checks/#ftp117","text":"Find functions calling warnings.warn but which are also decorated with warnings.deprecated or typing_extensions.deprecated","title":"FTP117"},{"location":"checks/#ftp118","text":"Find functions calling warnings.warn but which could use warnings.deprecated or typing_extensions.deprecated","title":"FTP118"},{"location":"checks/#ftp119","text":"Checks for unsorted __slots__ attributes on any level. The check is only done if the type is a list, tuple or set during parsing. Only items which are strings are used in the sort check; all others are ignored.","title":"FTP119"},{"location":"checks/#ftp120","text":"Find assignments to __slots__ outside of a class. The assignment can be wrapped into constructs like an if but the first container needs to be a class and not a function or module","title":"FTP120"},{"location":"checks/#ftp121","text":"Find calls of soft-deprecated os functions which should be replaced with subprocess calls like os.popen or os.spawnv","title":"FTP121"},{"location":"checks/#ftp122","text":"Find methods decorated with both classmethod and property . Through the different python versions the behavior is unstable and should be avoided","title":"FTP122"},{"location":"checks/#ftp123","text":"Finds usage of typing.Generator where the last argument in the subscript is None , because with PEP696 these can be omitted. The check is only active if running python 3.13+ a from __future__ import annotations import is present in the module the current code is inside a typing.TYPE_CHECKING block Also, the check will only consider type annotations (to prevent invalid syntax) if at least one of the following conditions is true: python 3.12 or below is used the code is not inside a typing.TYPE_CHECKING block","title":"FTP123"},{"location":"checks/#ftp124","text":"Find assignments to __all__ on non-module level, e.g. in classes or functions","title":"FTP124"},{"location":"checks/#ftp125","text":"Checks if the typing.override decorator is the first decorator applied to a function. If descriptor based decorators like @property are present, too, typing.override should be the seconds decorator applied. See here for details why the order matters","title":"FTP125"},{"location":"checks/#ftp126","text":"Checks if typing.TypeAlias is used. With PEP 695 the type statement should be used instead. The check is only active for python 3.12 and onwards","title":"FTP126"},{"location":"checks/#ftp127","text":"Checks if typing.TypeVar is used. With PEP 695 , TypeVar s are no longer needed. The check is only active for python 3.12 and onwards","title":"FTP127"},{"location":"checks/#ftp128","text":"Checks if typing.Generic is used. With PEP 695 , Generic is no longer needed. The check is only active for python 3.12 and onwards","title":"FTP128"},{"location":"checks/#ftp129","text":"Checks if the cause of a raised error is the same as the caught error, e.g. except ValueError: raise MyError(\"some message\") from ValueError This is most likely a bug and should be replaced with except ValueError as err: raise MyError(\"some message\") from err","title":"FTP129"},{"location":"checks/#ftp130","text":"Checks if string.Template is used with python 3.14 onwards. Use t-strings (PEP 750) instead.","title":"FTP130"},{"location":"checks/#ftp131","text":"Checks if re.compile is called with a string constant within a * function * for loop * while loop * lambda As the regex is recompiled each time the construct is called but won't change, it can be moved to a constant on module level.","title":"FTP131"},{"location":"checks/#ftp132","text":"Checks if a module functions of re like re.fullmatch is called with a constant string within a * function * for loop * while loop * lambda As the regex is recompiled each time the construct is called but won't change, the pattern can be compiled and stored in a constant and be used instead.","title":"FTP132"},{"location":"checks/#ftp133","text":"Checks bz2 , gzip , lzma or zlib are imported without using the compression namespace. With python3.14 these packages should be imported like import compression.bz2 instead of import bz2 . The check is only active for python 3.14 and onwards.","title":"FTP133"},{"location":"checks/#ftp134","text":"Checks if isinstance is called with a tuple which can be replaced with a union type. For example isinstance(foo, (str, int)) can be rewritten to isinstance(foo, str|int) .","title":"FTP134"},{"location":"checks/#ftp135","text":"Checks if issubclass is called with a tuple which can be replaced with a union type. For example issubclass(Foo, (A, B)) can be rewritten to issubclass(Foo, A|B) .","title":"FTP135"},{"location":"checks/#ftp136","text":"Checks if type(None) is used within isinstance when called with a union type. For example isinstance(foo, (str, type(None))) can be rewritten to isinstance(foo, str|None) .","title":"FTP136"},{"location":"checks/#ftp200","text":"Find calls of flask.abort and werkzeug.exceptions.abort . Instead of calling this helper function raise the appropriate exception directly","title":"FTP200"},{"location":"checks/#ftp220","text":"Find usage of requests.codes which should be replaced with http.HTTPStatus","title":"FTP220"},{"location":"checks/#docstyle","text":"Rules to make docstrings PEP 257 compliant inspired by pydocstyle . These rules are meant for projects which cannot or don't want to use ruff,, e.g. because flake8 is still used in parallel.","title":"Docstyle"},{"location":"checks/#ftp300","text":"Checks if a public package has a docstring in it's __init__ file.","title":"FTP300"},{"location":"checks/#ftp301","text":"Checks if a public class has a docstring.","title":"FTP301"},{"location":"checks/#ftp302","text":"Checks if a public method has a docstring.","title":"FTP302"},{"location":"checks/#ftp303","text":"Checks if a public function has a docstring.","title":"FTP303"},{"location":"checks/#ftp304","text":"Checks if a magic method (e.g. __eq__ ) has a docstring. __init__ methods are ignored","title":"FTP304"},{"location":"checks/#ftp305","text":"Checks if a __init__ method has a docstring.","title":"FTP305"},{"location":"checks/#ftp306","text":"Checks if an overridden method (decorated with typing.override ) has a docstring.","title":"FTP306"},{"location":"checks/#ftp307","text":"Checks if a public module has a docstring.","title":"FTP307"},{"location":"checks/#ftp308","text":"Checks if a docstring is completely empty.","title":"FTP308"},{"location":"checks/#ftp309","text":"Checks if the first line of a docstring is empty. The first line is considered the summary.","title":"FTP309"},{"location":"checks/#ftp310","text":"Checks that in a multiline docstring the first line is followed by an empty line.","title":"FTP310"},{"location":"checks/#ftp311","text":"Checks if the first line ends with a period.","title":"FTP311"},{"location":"checks/#ftp312","text":"Checks that a function/method decorated with typing.overload has no docstring.","title":"FTP312"},{"location":"checks/#ftp313","text":"Checks if a magic function (e.g. module level __getattr__ ) has a docstring.","title":"FTP313"},{"location":"checks/#ftp314","text":"Checks that no empty line is present between a function/method docstring and the function body","title":"FTP314"},{"location":"checks/#ftp315","text":"Checks that the closing \"\"\" is on a separate line in a multiline docstring","title":"FTP315"},{"location":"checks/#ftp316","text":"Checks that a docstring starts with an uppercase letter or number unless the word is part of ftp-docstyle-lowercase-words","title":"FTP316"},{"location":"checks/#ftp317","text":"Checks if triple quotes ( \"\"\" or ''' ) are used for docstrings","title":"FTP317"},{"location":"configuration/","text":"Configuration Global Configuration ftp-python-version : used for checks depending on a python version, e.g. if a certain feature is enabled or not. By default the current python interpreter version ftp-pyproject-toml-file : path to the pyproject.toml file is any exists Auto-manage Configuration If ftp-auto-manage-options is enabled, certain options of wrapped flake8 plugins are automatically set to new default values if they are not specified via the flake8 command line or configuration file. Please note that the list of these options and their default values may change between minor versions. The default setting is false. If enabled, the following options are automatically managed: ftp-min-python-version (by flake8-typing-imports ): this options specified the minimum python version supported or used by the project. It is set to the same value as ftp-python-version . As not all patch versions of python are recognized by this plugin (it then throws an unknown version error), the version is adjusted to the next supported patch version while staying in the same major/minor version. Developer Comments Developer comments are comments such as TODO xxx or FIXME later . With these options it is possible to enforce certain style rules for these comments, such as: * disallow certain identifier like FIXME * enforce identifier to a tracking system like jira (e.g. SOME-123 TODO this needs to be done ) * enforce a description Please note, that the check is case-insensitive, meaning that all dev comment identifier, comments and project ids are converted to uppercase for comparison. ftp-dev-comments-tracking-project-ids : defines the tracking projects which must be present in a dev comment. If the configuration is not set, the check will not be executed. By default an empty list ftp-dev-comments-allowed-synonyms : List of valid dev comment identifiers. The default value is TODO ftp-dev-comments-disallowed-synonyms : List of invalid dev comment identifier. Defaults to FIXME ftp-dev-comments-enforce-description : Checks if after the dev comment identifier (and optionally after the tracking project id) additional text is present. By default false Requirements check Check if a library is imported but not specified as a requirement. This check only works with projects installed in their environment, meaning that projects not using setuptools or poetry but pure requirement.txt files are not supported. This check is not active if the configuration ftp-distribution-name is not set. The check will go through all import statements and check if it's listed as a requirement. Most projects will use packages which are not part of the requirements. e.g. my-project uses the packages my_project and in it's test code tests . These need to be specified inside the configuration ftp-distribution-name . Also not always does the package match the distribution name, e.g. git is distributed as gitpython . In this case the configuration ftp-requirements-mapping allows to specify a mapping. When namespace packages like opentelemetry are used, the packages are split over multiple distributions. The mapping of ftp-requirements-mapping can consume nested packages as it's key. For instance, ftp-requirements-mapping could be written as ftp-requirements-mapping = opentelemetry.trace:opentelemetry-api,opentelemetry.sdk:opentelemetry-sdk . With the above the matching algorithm is as followed: Transform the import/import-from statement to a string ( from foo.bar import baz -> foo.bar.baz ) Check if the package starts any mapping key of ftp-requirements-mapping If yes, use the mapped distribution name If not extract the first part ( foo.bar -> foo ) and use it as the distribution name Check if the distribution name is part of the project requirements, a stdlib module or listed in ftp-requirements-packages Please note, that these checks base on the current working directory to map the current analysed file to a module name. Therefore, always execute flake8 in the projects root folder, else the behavior and findings of this check is not defined. Also, if files are given directly to the flake8 command, the path should be relative to the projects root folder. ftp-distribution-name : name of the project ftp-requirements-packages : comma-separated list of the packages defined by this project (e.g. tests and my_package ) ftp-requirements-mapping : a comma-separated list of mappings between the packages and distributable names ftp-requirements-ignore-type-checking-block : if set to true, the check will ignore type checking blocks ( typing.TYPE_CHECKING ) ftp-requirements-module-extra-mapping : comma separate list of mappings in the format <module> | extra [extra] . Each mapping defines, that the given modules and all submodules are allowed to use the requirements specified in the extras or group. The module name can also limit itself to a function or class inside the module, e.g. for a class A with a method foo in the module mod the mapping would be mod::A::foo . If multiples module names match to the file under check, the extra lists are combined. If the option is not set, all modules can import all requirements from all extras In order to also use group names, the option ftp-pyproject-toml-file needs to be set Docstyle ftp-docstyle-lowercase-words : a list of words which are allowed to be lowercase even if they start a docstring","title":"Configuration"},{"location":"configuration/#configuration","text":"","title":"Configuration"},{"location":"configuration/#global-configuration","text":"ftp-python-version : used for checks depending on a python version, e.g. if a certain feature is enabled or not. By default the current python interpreter version ftp-pyproject-toml-file : path to the pyproject.toml file is any exists","title":"Global Configuration"},{"location":"configuration/#auto-manage-configuration","text":"If ftp-auto-manage-options is enabled, certain options of wrapped flake8 plugins are automatically set to new default values if they are not specified via the flake8 command line or configuration file. Please note that the list of these options and their default values may change between minor versions. The default setting is false. If enabled, the following options are automatically managed: ftp-min-python-version (by flake8-typing-imports ): this options specified the minimum python version supported or used by the project. It is set to the same value as ftp-python-version . As not all patch versions of python are recognized by this plugin (it then throws an unknown version error), the version is adjusted to the next supported patch version while staying in the same major/minor version.","title":"Auto-manage Configuration"},{"location":"configuration/#developer-comments","text":"Developer comments are comments such as TODO xxx or FIXME later . With these options it is possible to enforce certain style rules for these comments, such as: * disallow certain identifier like FIXME * enforce identifier to a tracking system like jira (e.g. SOME-123 TODO this needs to be done ) * enforce a description Please note, that the check is case-insensitive, meaning that all dev comment identifier, comments and project ids are converted to uppercase for comparison. ftp-dev-comments-tracking-project-ids : defines the tracking projects which must be present in a dev comment. If the configuration is not set, the check will not be executed. By default an empty list ftp-dev-comments-allowed-synonyms : List of valid dev comment identifiers. The default value is TODO ftp-dev-comments-disallowed-synonyms : List of invalid dev comment identifier. Defaults to FIXME ftp-dev-comments-enforce-description : Checks if after the dev comment identifier (and optionally after the tracking project id) additional text is present. By default false","title":"Developer Comments"},{"location":"configuration/#requirements-check","text":"Check if a library is imported but not specified as a requirement. This check only works with projects installed in their environment, meaning that projects not using setuptools or poetry but pure requirement.txt files are not supported. This check is not active if the configuration ftp-distribution-name is not set. The check will go through all import statements and check if it's listed as a requirement. Most projects will use packages which are not part of the requirements. e.g. my-project uses the packages my_project and in it's test code tests . These need to be specified inside the configuration ftp-distribution-name . Also not always does the package match the distribution name, e.g. git is distributed as gitpython . In this case the configuration ftp-requirements-mapping allows to specify a mapping. When namespace packages like opentelemetry are used, the packages are split over multiple distributions. The mapping of ftp-requirements-mapping can consume nested packages as it's key. For instance, ftp-requirements-mapping could be written as ftp-requirements-mapping = opentelemetry.trace:opentelemetry-api,opentelemetry.sdk:opentelemetry-sdk . With the above the matching algorithm is as followed: Transform the import/import-from statement to a string ( from foo.bar import baz -> foo.bar.baz ) Check if the package starts any mapping key of ftp-requirements-mapping If yes, use the mapped distribution name If not extract the first part ( foo.bar -> foo ) and use it as the distribution name Check if the distribution name is part of the project requirements, a stdlib module or listed in ftp-requirements-packages Please note, that these checks base on the current working directory to map the current analysed file to a module name. Therefore, always execute flake8 in the projects root folder, else the behavior and findings of this check is not defined. Also, if files are given directly to the flake8 command, the path should be relative to the projects root folder. ftp-distribution-name : name of the project ftp-requirements-packages : comma-separated list of the packages defined by this project (e.g. tests and my_package ) ftp-requirements-mapping : a comma-separated list of mappings between the packages and distributable names ftp-requirements-ignore-type-checking-block : if set to true, the check will ignore type checking blocks ( typing.TYPE_CHECKING ) ftp-requirements-module-extra-mapping : comma separate list of mappings in the format <module> | extra [extra] . Each mapping defines, that the given modules and all submodules are allowed to use the requirements specified in the extras or group. The module name can also limit itself to a function or class inside the module, e.g. for a class A with a method foo in the module mod the mapping would be mod::A::foo . If multiples module names match to the file under check, the extra lists are combined. If the option is not set, all modules can import all requirements from all extras In order to also use group names, the option ftp-pyproject-toml-file needs to be set","title":"Requirements check"},{"location":"configuration/#docstyle","text":"ftp-docstyle-lowercase-words : a list of words which are allowed to be lowercase even if they start a docstring","title":"Docstyle"},{"location":"install/","text":"Installation To start using flake8-tergeo, follow these steps: Install flake8-tergeo via pip pip install flake8-tergeo Configure flake8 : In your .flake8 configuration file, you need to enable the flake8-tergeo extensions by adding FT to the enable-extensions option: [flake8] enable-extensions = FT The set the select option to include C ( mccabe ), E ( pycodestyle ), F ( pyflakes ), W ( pycodestyle ), and FT ( flake8-tergeo ) to ensure that only the necessary checks are executed: [flake8] select = C,E,F,W,FT","title":"Installation"},{"location":"install/#installation","text":"To start using flake8-tergeo, follow these steps: Install flake8-tergeo via pip pip install flake8-tergeo Configure flake8 : In your .flake8 configuration file, you need to enable the flake8-tergeo extensions by adding FT to the enable-extensions option: [flake8] enable-extensions = FT The set the select option to include C ( mccabe ), E ( pycodestyle ), F ( pyflakes ), W ( pycodestyle ), and FT ( flake8-tergeo ) to ensure that only the necessary checks are executed: [flake8] select = C,E,F,W,FT","title":"Installation"},{"location":"plugins/","text":"Plugins flake8-tergeo is a flake8 plugin that also includes other essential plugins and manages their execution and configuration. This integration provides several benefits: Simplified Management : Managing multiple flake8 plugins individually can be cumbersome, especially when dealing with different versions and configurations. flake8-tergeo simplifies this by including a curated list of important plugins with fixed versions, ensuring compatibility and reducing the overhead of manual management. Consistent Configuration : flake8-tergeo can handle the configuration of the included plugins. All configuration values are prefixed with ftp . This ensures that all plugins are configured consistently, reducing the risk of misconfiguration and making it easier to maintain the code quality standards across the project. Unified Error Codes : The error code prefixes of the included plugins are replaced with new ones, providing a unified and consistent error reporting system. Curated Plugin List : The included plugin list is fixed and curated, meaning that only the most important and relevant plugins are included. This reduces the noise from less useful plugins and focuses on the most critical checks for your project. Resilience to Unmaintained Plugins : If a plugin becomes unmaintained or certain checks are broken, flake8-tergeo can seamlessly replace them or provide fixes out of the box. This ensures continuous and reliable code quality checks without requiring manual intervention. By using flake8-tergeo, users can benefit from a streamlined and efficient code quality management process, ensuring that their code adheres to best practices with minimal effort. Plugin List ID Plugin Original Prefix Description Disabled Checks FTB flake8-bugbear B Checks for common issues 001, 016, 950 FTU flake8-builtins A Checks for overwritten built-in methods FTC flake8-comprehensions C Checks set/list/dict comprehensions FTT flake8-pytest-style PT Checks common style issues or inconsistencies with pytest-based tests 004, 005, 013, 019 FTM flake8-simplify SIM Checks for simplifications in your code 116, 901 FTY flake8-typing-imports TYP Checks for incompatible use of the typing module for a defined python version","title":"Plugins"},{"location":"plugins/#plugins","text":"flake8-tergeo is a flake8 plugin that also includes other essential plugins and manages their execution and configuration. This integration provides several benefits: Simplified Management : Managing multiple flake8 plugins individually can be cumbersome, especially when dealing with different versions and configurations. flake8-tergeo simplifies this by including a curated list of important plugins with fixed versions, ensuring compatibility and reducing the overhead of manual management. Consistent Configuration : flake8-tergeo can handle the configuration of the included plugins. All configuration values are prefixed with ftp . This ensures that all plugins are configured consistently, reducing the risk of misconfiguration and making it easier to maintain the code quality standards across the project. Unified Error Codes : The error code prefixes of the included plugins are replaced with new ones, providing a unified and consistent error reporting system. Curated Plugin List : The included plugin list is fixed and curated, meaning that only the most important and relevant plugins are included. This reduces the noise from less useful plugins and focuses on the most critical checks for your project. Resilience to Unmaintained Plugins : If a plugin becomes unmaintained or certain checks are broken, flake8-tergeo can seamlessly replace them or provide fixes out of the box. This ensures continuous and reliable code quality checks without requiring manual intervention. By using flake8-tergeo, users can benefit from a streamlined and efficient code quality management process, ensuring that their code adheres to best practices with minimal effort.","title":"Plugins"},{"location":"plugins/#plugin-list","text":"ID Plugin Original Prefix Description Disabled Checks FTB flake8-bugbear B Checks for common issues 001, 016, 950 FTU flake8-builtins A Checks for overwritten built-in methods FTC flake8-comprehensions C Checks set/list/dict comprehensions FTT flake8-pytest-style PT Checks common style issues or inconsistencies with pytest-based tests 004, 005, 013, 019 FTM flake8-simplify SIM Checks for simplifications in your code 116, 901 FTY flake8-typing-imports TYP Checks for incompatible use of the typing module for a defined python version","title":"Plugin List"}]}